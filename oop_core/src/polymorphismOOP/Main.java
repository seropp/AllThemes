package polymorphismOOP;

public class Main {
    public static void main(String[] args) {


    }


}

class A {
    int a= 0;

    void ret() {

        System.out.println(" A " + a);

    }
}

class B extends A implements First, Second{

   int b = super.a;

    @Override
    public void ret() {
        super.ret();
        System.out.println(" B " +b);

    }

}
interface First {
    default void ret(){
        System.out.println("First");
    }
}
interface Second {
    default void ret(){
        System.out.println("Second");
    }
}
/*

   1. Polymorphism - свойство системы использовать объекты с одинаковым интерфейсом
                     без информации о типе и внутреней структуре объекта.
      1 интерфейс множество реализаций.
   2. Полиморфизм объектов:
      Все объекты в Java являются полиморфными. -> любой obj. проходит проверку IS-A => объ. может принимать
      значения различных типов: Car car = new Car(); Object obj = new Car();
      Полиморфизм методов:
      Метод считается полиморфным, когда хотя бы 1 аргумент является полиморфной переменной.
        2 вида полиморфных функций:
        *ad hoc - функция ведет себя по разному для разных типов аргумента (напр.: draw()) -> ПЕРЕГРУЗКА
        *параметрический - функция ведет себя одинаково для разных типов аргументов (напр.: add())
            -> Параметрический полиморфизм" - это еще один термин для "Generics" в Java.
            в Generic мы указываем, какие типы будут использоваться.
   3. Переопределение (override) дает полиморфизм подтипов.
      Для ПЕРЕОПРЕДЕЛЕННЫХ методов допускается КОВАРИАТИВНЫЕ возвращаемые типы
   4. ПОЛИМОРФИЗМ может наблюдаться:
       * на этапе компиляции (ad-hoc + параметрический)
       * или во время выполнения (RunTime) полиморфизм подтипов
   5. В зависимости от того, когда происходит полиморфизм выделяют
      2 типа связывания(Присоединение вызова метода к телу метода):
            a. Раннее (Статическое) (early binding) - характерно для ad-hoc полиморфизма и профодится во время
               компиляции. -> компилятор определеяет подходящий метод
            b. Позднее (Динамическое) (late binding) - происходит в рантайме и соответственно характерно для
               полиморфизма подтипов. Происходит в зависимости от объ., а не ссылки.
    6. - как только кл. созд., реализ. и протест. он может своб. исп. без заботы о его реализации
       - что приводит к следующему преимущ., как универсальность ислабосвязанность
       - снижает время компиляции - ускорение работы программы
       - Гибкость при создании новых типов (на основе 1 интерф. создание новых с разн. реализациями)
       - Объединять объекты с общим типом или поведением в одну коллекцию или массив и управлять ими единообразно

*/