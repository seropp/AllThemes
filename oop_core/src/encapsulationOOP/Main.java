package encapsulationOOP;

public class Main {

}



/*


1. Инкапсуляция в Java является механизмом обёртывания данных (переменных) с методами, в одно целое.
2. Под инкапсуляцией также подразумевают СОКРЫТИЕ(СКРЫТИЕМ) свойств и методов
   Сокрытие — это часть инкапсуляции.
3. Инкапсуляция в Java достигается с помощью частных переменных и методов getter-setter.
5. Она обеспечивает слабо связанный, многоразовый, безопасный контроль доступа.
6. Вызывающий абонент не знает, что происходит внутри методов getter и setter. Это делает наш код более безопасным
7. Инкапсуляция помогает легко писать модульные тестовые примеры .
8. Пакет java.lang.reflect может нарушать инкапсуляцию. (Этот пакет предоставляет возможности
    для работы с объектами на этапе выполнения программы.)
9. Благодаря инк., код легче изменять и отлаживать.
10. Если вы передаете ссылку на объект в сеттер, то не копируйте ее во внутреннюю переменную напрямую.
    Вместо этого делайте ее копию и только тогда присваивайте ее полю.
    ОШИБКИ ПРИ ИСПОЛЬЗОВАНИИ getters И setters:
        Ошибка №1: Использование геттеров и сеттеров для public-полей.
        Ошибка №2: Присваивание ссылки на объект напрямую в сеттере.
                   Имея ссылку мы можем изменить объект в обход set
                   => В Set, для ссылочных объектов нужно использовать копии
        Ошибка №3: Возврат геттером ссылки на объект.
        * С примитивами такого не произойдет (Java автоматически копирует их значения.)
        * Для String это тоже безопасно => immutable-тип (создается новый объект)
        * для коллекций копии, однако Для коллекций из элементов типа String не требуется специальной реализации,
        * так как объекты этого типа неизменяемы (immutable)

    ДОПОЛНИТЕЛЬНО об инкапсуляции
        1. Поля класса можно сделать только для чтения или только для записи.
        2. Класс может иметь полный контроль над тем, что хранится в его полях.
        3. Инкапсуляция связывает данные с соответствующими функциями.
        4. Таким образом, мы храним переменную и методы в одном месте.
           Это место “класс”. Класс является основой для инкапсуляции.



*/